// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Kitty Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

// Mixins
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;
}

@mixin box-shadow($shadow) {
  -webkit-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
  -ms-box-shadow: $shadow;
  -o-box-shadow: $shadow;
  box-shadow: $shadow;
}

@mixin translate($args...){
  -webkit-transform: translate($args);
  -moz-transform: translate($args);
  -ms-transform: translate($args);
  -o-transform: translate($args);
  transform: translate($args);
}

@mixin rotate($deg) {
  -webkit-transform: rotate($deg);
  -moz-transform: rotate($deg);
  -ms-transform: rotate($deg);
  -o-transform: rotate($deg);
  transform: rotate($deg);
}

@mixin transition($duree) {
  -webkit-transition: all $duree ease-in-out;
  -moz-transition: all $duree ease-in-out;
  -ms-transition: all $duree ease-in-out;
  -o-transition: all $duree ease-in-out;
  transition: all $duree ease-in-out;
}
@mixin transition-all($args) {
  -webkit-transition: $args;
  -moz-transition:$args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}


@mixin transition-ease($duree) {
  -webkit-transition: all $duree ease;
  -moz-transition: all $duree ease;
  -ms-transition: all $duree ease;
  -o-transition: all $duree ease;
  transition: all $duree ease;
}

@mixin bg-degrade-linear($top, $bottom) {
  background: $top;
  background: -webkit-linear-gradient(top, $top, $bottom);
  background: -o-linear-gradient(top, $top, $bottom);
  background: -moz-linear-gradient(top, $top, $bottom);
  background: linear-gradient(to bottom, $top, $bottom);
}

@mixin bg-linear-gradient($deg, $color-1, $color-2) {
  background: -moz-linear-gradient($deg, $color-1 0, $color-2 100%);
  /* FF3.6+ */
  background: -webkit-gradient(linear, $deg, color-stop(0, $color-1), color-stop(100%, $color-2));
  /* Chrome,Safari4+ */
  background: -webkit-linear-gradient($deg, $color-1 0, $color-2 100%);
  /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient($deg, $color-1 0, $color-2 100%);
  /* Opera 11.10+ */
  background: -ms-linear-gradient($deg, $color-1 0, $color-2 100%);
  /* IE10+ */
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#1301FE', endColorstr='#F4F60C', GradientType='1');
  /* for IE */
  background: linear-gradient($deg, $color-1 0, $color-2 100%);
  /* W3C */
}

@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }

  -webkit-animation: $animations;
  -moz-animation: $animations;
  -o-animation: $animations;
  animation: $animations;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }

  @-moz-keyframes #{$animationName} {
    @content;
  }

  @-o-keyframes #{$animationName} {
    @content;
  }

  @keyframes #{$animationName} {
    @content;
  }
}


/*@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}*/

@mixin transition-delay($args...) {
  -webkit-transition-delay: $args;
  -moz-transition-delay: $args;
  -ms-transition-delay: $args;
  -o-transition-delay: $args;
  transition-delay: $args;
}

@mixin transform($args...) {
  -webkit-transform: $args;
  -moz-transform: $args;
  -ms-transform: $args;
  -o-transform: $args;
  transform: $args;
}

@mixin transform-origin($args...) {
  -webkit-transform-origin: $args;
  -moz-transform-origin: $args;
  -ms-transform-origin: $args;
  -o-transform-origin: $args;
  transform-origin: $args;
}


@mixin dots(){
  -webkit-transform: translate(-50%, -50%) rotate(90deg);
  -moz-transform: translate(-50%, -50%) rotate(90deg);
  -ms-transform: translate(-50%, -50%) rotate(90deg);
  -o-transform: translate(-50%, -50%) rotate(90deg);
  transform: translate(-50%, -50%) rotate(90deg);

}



// Read the article: http://sassbreak.com/viewport-relative-headings-with-sass
// Max breakpoint
$max-breakpoint: 1025;

// This could be one of your media query breakpoint variables
$wide-screen: "(min-width: #{$max-breakpoint}px)";

// Function
@function get-vw($target) {
  // 1 vw is equal to 1% of the viewport width
  $vw-context: ($max-breakpoint * .01) * 1px; // 1% viewport width
  @return ($target/$vw-context) * 1vw;
}

// Mixin
@mixin vw($size) {
  font-size: get-vw($size); // Prevent font-size from getting too big

  @media #{$wide-screen} {
    font-size: $size;
  }
}

@mixin transition-spe ($transition) {
  -webkit-transition: $transition;
  -moz-transition:    $transition;
  -ms-transition:     $transition;
  -o-transition:      $transition;
  transition:         $transition;
}

@keyframes scaleIn {
  from {
    transform: scale(.5, .5);
    opacity: .5;
  }
  to {
    transform: scale(2.5, 2.5);
    opacity: 0;
  }
}

@keyframes Gradient {
  0% {
    background-position: 0% 50%
  }
  50% {
    background-position: 100% 50%
  }
  100% {
    background-position: 0% 50%
  }
}

@-webkit-keyframes rotating /* Safari and Chrome */ {
  from {
    -webkit-transform: rotate(0deg);
    -o-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  to {
    -webkit-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes rotating {
  from {
    -ms-transform: rotate(0deg);
    -moz-transform: rotate(0deg);
    -webkit-transform: rotate(0deg);
    -o-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  to {
    -ms-transform: rotate(360deg);
    -moz-transform: rotate(360deg);
    -webkit-transform: rotate(360deg);
    -o-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}